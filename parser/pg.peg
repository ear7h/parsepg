{
package parser

import (
    "reflect"
)

}


queries <- v:(query)* newline {
    varr, ok := v.([]interface{})
    if !ok {
        panic("not ok")
    }

    arr := make([]Query, len(varr))
    for i := range varr {
        arr[i], ok = varr[i].(Query)
        if !ok {
            panic("not ok1")
        }
    }

    return arr, nil
}


query <- q: ([^;])* ';' ws: whitespace? {
    log.Printf("\tq: %v\nws: %v",q,ws)
    return Query(c.text), nil
}


file_line <- ([^;] / [^--])*

/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */


_ "space" <- [ \t\n\r\f]
_h "horizontal space" <- [ \t\f]
newline <- [\n\r]
non_newline <- [^\n\r]

comment <- "--" non_newline*

whitespace <- (_+ / comment)

/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */

special_whitespace <- (space+ / comment newline)
horiz_whitespace <- (horiz_space / comment)
whitespace_with_newline <- (horiz_whitespace* newline special_whitespace*)

/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */

quote <- '\''
quotestop <- quote whitespace*
quotecontinue <- quote whitespace_with_newline quote
quotefail <- quote whitespace* "-"

/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */

xbstart <- [bB] quote
xbinside <- [^']*

/* Hexadecimal number */
xhstart <- [xX] quote
xhinside <- [^']*

/* National character */
xnstart [nN] quote


EOF <- !.
