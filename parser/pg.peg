{
package parser

import (
    "reflect"
)

}


queries <- v:(query)* newline {
    varr, ok := v.([]interface{})
    if !ok {
        panic("not ok")
    }

    arr := make([]Query, len(varr))
    for i := range varr {
        arr[i], ok = varr[i].(Query)
        if !ok {
            panic("not ok1")
        }
    }

    return arr, nil
}


query <- q: ([^;])* ';' ws: whitespace? {
    log.Printf("\tq: %v\nws: %v",q,ws)
    return Query(c.text), nil
}


file_line <- ([^;] / [^--])*

/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */


_ "space" <- [ \t\n\r\f]
_h "horizontal space" <- [ \t\f]
newline <- [\n\r]
non_newline <- [^\n\r]

comment <- "--" non_newline*

whitespace <- (_+ / comment)

/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */

special_whitespace <- (space+ / comment newline)
horiz_whitespace <- (horiz_space / comment)
whitespace_with_newline <- (horiz_whitespace* newline special_whitespace*)

/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */

quote <- '\''
quotestop <- quote whitespace*
quotecontinue <- quote whitespace_with_newline quote
quotefail <- quote whitespace* "-"

/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */

xbstart <- [bB] quote
xbinside <- [^']*

/* Hexadecimal number */
xhstart <- [xX] quote
xhinside <- [^']*

/* National character */
xnstart <- [nN] quote

/* quoted string that allows backslash escapes */
xestart <- [eE]{quote}
xeinside <- [^\\']+
xeescape <- [\\][^0-7]
xeoctesc <- [\\][0-7]{1,3}
xehexesc <- [\\]x[0-9A-Fa-f]{1, 2}
xeunicode <- [\\](u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
xeunicodeail <- [\\](u[0-9A-Fa-f[{0,3}|U[0-9A-Fa-f]{0,7})

/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
xqstart <- (quote)
xqdouble <- (quote)(quote)
xqinside <- [^']+

/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$",
 * and extends to the first occurrence of an identical string.
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */

dolq_start <- [A-Za-z\200-\377_]
dolq_cont <- [A-Za-z\200-\377_0-9]
dolqdelim <- \$(dolq_start dolq_cont*)?$\$
dolqfailed <- \$ dolq_start dolq_cont*
dolqinside <- [^$]+

/* Double quote
  * Allows embedded spaces and other special characters into identifiers.
  */

dquote <- \"
xdstart <- dquote
xdstop <- dquote
xddouble <- dquote dquote
xdinside <- [^"]+

/* Unicode escapes */
uescape <- [uU][eE][sS][cC][aA][pP][eE] whitespace* quote[^'] quote
uescapefail <- [uU][eE][sS][cC][aA][pP][eE] whitespace* "-" / [uU][eE][sS][cC][aA][pP][eE] whitespace* quote [^'] / [uU][eE][sS][cC][aA][pP][eE] whitespace* quote / [uU][eE][sS][cC][aA][pP][eE] whitespace* / [uU][eE][sS][cC][aA][pP] / [uU][eE][sS][cC][aA] / [uU][eE][sS][cC] / [uU][eE][sS] / [uU][eE] / [uU]

/* Quoted identifier with Unicode escape */
xuistart <- [uU] & dquote

/* Quoted string with unicode escapes */
xusstart <- [uU] & quote

/* Optional UESCAPE after a quoted string or identifier with Unicode escapes. */
xustop1 uescapefail?
xustop2 uescape

/* error rule to avoid backup */
// TODO: is this necessary with a PEG grammar?

xufailed <- [uU]&

/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!  Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *    {operator} would. Then the tie-breaker (first matching rule of same
 *    length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *    in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *    if found throw it back with yyless().  This handles the plus-slash-star
 *    problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */

xcstart <- \/\* op_chars*
xcstop <- \*+\/
xcinside <- [^*/]+

digit <- [0-9]
ident_start <- [A-Za-z\200-\377_]
ident_cont <- [A-Za-z\200-\377_0-9\$]

identifier <- ident_start ident_cont*
/* Assorted special-case operators and operator-like tokens */
typecast <- "::"
dot_dot <- \.\.
colon_equals <- ":="
equals_greater <- "=>"
less_equals <- "<="
greater_equals <- ">="
less_greater <- "<>"
not_equals <- "!="

/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.  "op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */

self <- [,()\[\].;\:\+\-\*\/\%\^\<\>\=]
op_chars <- [\~\!\@\#\^\&\|\`\?\+\-\*\/\%\<\>\=]
operator <- op_chars+

/* we no longer allow unary minus in numbers.
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
 * {decimalfail} is used because we would like "1..10" to lex as 1, dot_dot, 10.
 *
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */

integer <- digit+
decimal <- ((digit* \. digit+) / (digit+ \. digit+))
decimalfail <- digit+ \.\.
real <- (integer / decimal) [eE] [-+] ? digit+
realfail1 <- (integer / decimal) [eE]
realfail2 <- (integer / decimal) [eE] [-+]

param <- \$ integer

other .


EOF <- !.
